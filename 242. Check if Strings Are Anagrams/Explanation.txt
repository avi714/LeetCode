A. Brute Force: For every character in string A, loop through string B and check if it exists. If it does, remove that character from string B. After processing all characters in string A, check if string B is empty. If it is, then the strings are anagrams; otherwise, they are not. Time Complexity:  O(n**2). Space Complexity: O(n²). Since strings are immutable, each time a character is removed from string B, a new string is created. In the worst case, where each character in string A exists in string B, we perform up to n removals, each creating a new string of decreasing length (from n down to 1). The total space used across all these new strings is O(n²).
	
B. HashMap: Iterate through both strings simultaneously. For each character in string A, increment its corresponding key in the HashMap; for each character in string B, decrement the key. After processing both strings, iterate through the HashMap and check if all values are zero. If any value is not zero, return false. Time Complexity: O(n). Space Complexity: O(1), since the HashMap size remains fixed (i.e., 26 for lowercase letters).
	
C. Frequency Array: Create an array of size 26 to represent each letter of the alphabet. Loop through both strings simultaneously: for each character in string A, increment the corresponding index (e.g., 0 for 'a', 1 for 'b'), and for each character in string B, decrement the corresponding index. After processing, check if all values in the array are zero. If any value is not zero, return false. Time Complexity:  O(n). Space Complexity: O(1), since the array size is fixed (i.e., 26).
