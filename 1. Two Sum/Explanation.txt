There are 3 possible Solutions for this problem.

A. Brute Force: For every element A[i] scan the subarray A[i+1:] to check if A[i] + A[j] == target. Time Complexity:  O(n**2). Space Complexity: O(1)

B. Sorting and Binary Search: Sort the array in ascending order, then use Binary search to look for target - element in the array for each element. Time Complexity:  O(logn) per Binary Search + O(nlogn) for sorting. Space Complexity: O(n) for sorting (if not done in-place) + O(log n) for binary search (in case of recursive implementation and call stack usage). Note: This approach wonâ€™t work if the original indices of the elements are required, as sorting changes their order.
  
C. HashMap: Iterate through the array and store target - A[i] as key and i as the value while simultaneously checking if A[i] exists in the HashMap. As A[i] + A[j] = target we can rewrite this as A[j] = target - A[i] and that is essentially what we are storing in the HashMap as key. Time Complexity:  O(n). Space Complexity: O(n)
