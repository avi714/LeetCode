For all the filled cells, determine if the board represents a valid Sudoku configuration. Every row, column, and 3x3 grid must contain unique digits from 1 to 9.

A. HashMap and HashSet: For rows and columns, create a HashMap, where the keys in the row map represent row numbers, and the keys in the column map represent column numbers. Each key maps to a HashSet that stores the digits seen so far in that row or column. For the 3x3 grids, create a HashMap, where each key is a List (Tuple in Python) of Integers containing two elements: (row / 3) and (col / 3). These values represent the grid indices based on the current cell's position. Each key maps to a HashSet that stores the digits seen so far in that grid. For example: (0,0) represents the grid covering rows 0–2 and columns 0–2, (0,1) represents rows 0–2 and columns 3–5, and so on, up to (2,2) which covers rows 6–8 and columns 6–8. Then, iterate over each cell in the board and skip cells containing '.' (empty cells). For filled cells, check if the digit is already present in the corresponding row set, column set, or grid set. If it is, return false because the board is invalid. Otherwise, add the digit to its respective row, column, and grid HashSet. Time Complexity: O(n**2). Space Complexity: O(n**2).
